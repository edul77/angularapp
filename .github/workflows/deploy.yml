name: Angular CI/CD to EC2

on:
 push:
  branches:
    - main # Change to master or your primary branch if needed


env:
 NODE_VERSION: '20'
 BUILD_DIR: dist/angularapp/browser # <<< CRITICAL: Update this path!
 REMOTE_DIR: /var/www/jobmatch # Target directory on EC2 where Nginx serves files

jobs:
 deploy:
  runs-on: ubuntu-latest
  environment: Production

  steps:
  - name: Checkout Code
    uses: actions/checkout@v4

  - name: Set up Node.js
    uses: actions/setup-node@v4
    with:
      node-version: ${{ env.NODE_VERSION }}

  - name: Install Dependencies and Build Angular App
    run: |
      npm ci # Install dependencies securely
      npm run build -- --configuration=production # Build for production
    env:
      # Optional: Use environment variables for build if necessary
      CI: true

  - name: List Build Artifacts (for debugging)
    run: ls -l ${{ env.BUILD_DIR }}

  - name: Deploy via SCP (Secure Copy) to EC2
    uses: appleboy/scp-action@v0.1.7
    with:
      # --- Secrets Configuration (Requires setting these in GitHub repository settings) ---
      host: ${{ secrets.EC2_HOST }}
      username: ${{ secrets.EC2_USER }}
      key: ${{ secrets.JOBMATCH_EC2_SSH_KEY }}
      # ---------------------------------------------------------------------------------
      source: ${{ env.BUILD_DIR }}/
      target: /tmp/angularapp # Use a temporary folder on EC2

  - name: ðŸ§° Install NGINX on EC2 (if not present)
      run:|
        ssh ${{ secrets.JOBMATCH_EC2_USER }}@${{ secrets.JOBMATCH_EC2_HOST }} <<'EOF'
          if ! command -v nginx &> /dev/null; then
            echo "NGINX not found. Installing..."
            sudo apt update
            sudo apt install -y nginx
            sudo systemctl enable nginx
          else
            echo "NGINX is already installed."
          fi
        EOF

  - name: Execute Remote SSH Commands on EC2
    uses: appleboy/ssh-action@v1.0.0
    with:
      host: ${{ secrets.EC2_HOST }}
      username: ${{ secrets.EC2_USER }}
      key: ${{ secrets.JOBMATCH_EC2_SSH_KEY }}
      script: |
        # 1. Create the target directory if it doesn't exist
        echo "Ensuring target directory exists: ${{ env.REMOTE_DIR }}"
        sudo mkdir -p ${{ env.REMOTE_DIR }}

        # 2. Clean up the existing app files (optional, but ensures no stale files remain)
        echo "Cleaning up old files in ${{ env.REMOTE_DIR }}"
        sudo rm -rf ${{ env.REMOTE_DIR }}/*

        # 3. Move the new built files from the temporary upload location
        echo "Copying new files from /tmp/angular-app-upload to ${{ env.REMOTE_DIR }}"
        # Note: We move the *contents* of the upload folder
        sudo mv /tmp/angularapp/* ${{ env.REMOTE_DIR }}/

        # 4. Set appropriate permissions (e.g., for Nginx/www-data user)
        echo "Setting permissions for ${{ env.REMOTE_DIR }}"
        sudo chown -R www-data:www-data ${{ env.REMOTE_DIR }}
        sudo chmod -R 755 ${{ env.REMOTE_DIR }}

        # 5. Clean up the temporary directory
        echo "Cleaning up temporary folder /tmp/angular-app-upload"
        sudo rm -rf /tmp/angularapp

        # 6. Restart Nginx to serve the new content
        echo "Restarting Nginx"
        sudo systemctl restart nginx || echo "Nginx restart failed. Check logs."

        echo "Deployment complete!"
